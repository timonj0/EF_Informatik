<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://timonj0.github.io/EF_Informatik/</id>
    <title>Lern Blog Blog</title>
    <updated>2023-03-24T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://timonj0.github.io/EF_Informatik/"/>
    <subtitle>Lern Blog Blog</subtitle>
    <icon>https://timonj0.github.io/EF_Informatik/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Cookies]]></title>
        <id>/2023/03/24/cookies</id>
        <link href="https://timonj0.github.io/EF_Informatik/2023/03/24/cookies"/>
        <updated>2023-03-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Funktionsweise]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="funktionsweise">Funktionsweise<a class="hash-link" href="#funktionsweise" title="Direkter Link zur Überschrift">​</a></h2><p>Cookies sind kleine Dateien, welche von einem Webserver an den Client gesendet und von diesem gespeichert werden. Bei einer erneuten Anfrage an den Webserver kann der Cookie mitgesendet werden, damit der Server gewisse Informationen wie Login-Daten automatisiert erhält.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wie-cookies-logins-vereinfachen">Wie Cookies Logins vereinfachen<a class="hash-link" href="#wie-cookies-logins-vereinfachen" title="Direkter Link zur Überschrift">​</a></h2><p>Wie bereits erwähnt, können Cookies den Login-Prozess auf Websiten stark vereinfachen. Das geschieht dadurch, dass die Logindaten oder ein Schlüsselwert bei der Anfrage an den Webserver mitgeschickt werden. Akzeptiert der Server das Login, kann er die nicht öffentlich zugänglichen Daten direkt zurückschicken, ohne dass sich der User mühsam einloggen muss.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="unsichere-benutzerdatenbanken">Unsichere Benutzerdatenbanken<a class="hash-link" href="#unsichere-benutzerdatenbanken" title="Direkter Link zur Überschrift">​</a></h2><p>In einer Benutzerdatenbank dürfen Passwörter niemals unverschlüsselt gesichert werden. Ist das der Fall, werden bei Data-Breaches die hochsensiblen Userdaten unzensiert veröffentlicht. Stattdessen müssen zu diesem Zweck Hashes verwendet werden, welche selbst bei Leaks für Aussenstehende gänzlich nutzlos sind.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[API mit nodeRED erstellen]]></title>
        <id>/2023/03/10/api-mit-nodered</id>
        <link href="https://timonj0.github.io/EF_Informatik/2023/03/10/api-mit-nodered"/>
        <updated>2023-03-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Anleitung]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="anleitung">Anleitung<a class="hash-link" href="#anleitung" title="Direkter Link zur Überschrift">​</a></h2><p>Um eine simple API auf nodeRED zu erstellen, muss als ersten eine neue http in node erstellt werden. In der http in node kann dann die URL definiert werden, unter der die API erreichbar ist. Zum beispiel <code>/api</code>.</p><p>Danach kann ein Skript angefügt werden, wo die Daten verarbeitet werden. Was mit den empfangenen Daten angefangen wird, ist frei wählbar. Zur Demonstration kann ein Skript angefügt werden, welches nur die Zeile <code>return msg;</code> enthält. Dieses Skript leitet einfach die empfangenen Daten weiter.</p><p>Als letztes wird eine http response node angefügt, welche auf die Anfrage mit den Daten, welches das Skript ausgiebt, antwortet. In unserem beispiel mit dem <code>return msg;</code> Skript werden also einfach die Daten, welche wir an die API gesendet haben, wieder zurückgesendet.</p><p>Hier eine Visualisierung der simplen API in NodeRED:
<img loading="lazy" src="/EF_Informatik/assets/images/nodered_api-640478f4cb17f126fa9573d2499fe0f3.png" width="771" height="171" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="erklärung">Erklärung<a class="hash-link" href="#erklärung" title="Direkter Link zur Überschrift">​</a></h2><p>Unsere API kommuniziert via HTTP. Der Client sendet eine Anfrage an die API-Endpunkt-URL. Die Anfrage kann verschiedene Arten von Informationen enthalten, wie z.B. eine Anfrage-Methode wie <code>GET</code>, <code>POST</code>, <code>PUT</code> oder <code>DELETE</code>, Parameter, Header-Informationen und manchmal auch einen Anfrage-Body, der Daten enthält, die an die API gesendet werden sollen.</p><p>Die API empfängt die Anfrage und verarbeitet sie, indem sie die notwendigen Daten aus der Anfrage extrahiert, in unserem Fall die Daten manipuliert, um eine Antwort zu generieren. Die Antwort wird dann als HTTP-Antwort zurück an den Client gesendet, die in der Regel einen Statuscode, Header-Informationen und manchmal auch einen Antwort-Body enthält, der die Daten enthält, die an den Client zurückgesendet werden.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="erfahrungen">Erfahrungen<a class="hash-link" href="#erfahrungen" title="Direkter Link zur Überschrift">​</a></h2><p>Meine Erfahrungen mit dem Erstellen einer eigenen API mit NodeRED waren durchaus positiv. Das Erstellen geschieht durch die simple Natur von NodeRED mit grosser Mühelosigkeit. Trotzdem denke ich, dass mit NodeRED ganz schön nützliche und vielleicht sogar mächtige APIs erstellt werden können.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[NumTrip]]></title>
        <id>/2023/01/23/final</id>
        <link href="https://timonj0.github.io/EF_Informatik/2023/01/23/final"/>
        <updated>2023-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Konsolen- und Fensterbasiert]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="konsolen--und-fensterbasiert">Konsolen- und Fensterbasiert<a class="hash-link" href="#konsolen--und-fensterbasiert" title="Direkter Link zur Überschrift">​</a></h2><p><img loading="lazy" src="/EF_Informatik/assets/images/numtrip_screenshots-d729286cf7bbda299954710b3b649f36.png" width="1300" height="738" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="ziel-des-spiels">Ziel des spiels<a class="hash-link" href="#ziel-des-spiels" title="Direkter Link zur Überschrift">​</a></h3><p>Im Spiel NumTrip können in einem Spielfeld Felder, welche einen Wert besitzen, kombiniert werden. Dabei werden alle Nachbarfelder absorbiert, welche den selben Wert haben wie das ausgewählte Feld. Das Ziel des Spiels ist es, bis zum erreichen eines Feldes mit dem Wert 1024 einen möglichst hohen Score zu erzielen, ohne Game Over zu gehen. Game Over ist man, wenn keine Felder mehr kombiniert werden können und der Score wird berechnet, indem die Anzahl im Zug absorbierter Felder mit dem Wert des resultierenden Feldes multipliziert und zu dem vorherigen Score addiert wird.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="top-down-entwurf">Top-Down Entwurf<a class="hash-link" href="#top-down-entwurf" title="Direkter Link zur Überschrift">​</a></h3><p>Der Top-Down Entwurf meines NumTrip Spiels sieht wiefolgt aus:
<img loading="lazy" src="/EF_Informatik/assets/images/numtrip_topdown-5c474300e54201d7bf2fb79cfedc0ca2.png" width="1980" height="1175" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="auffüllen-des-spielfelds">Auffüllen des Spielfelds<a class="hash-link" href="#auffüllen-des-spielfelds" title="Direkter Link zur Überschrift">​</a></h3><p>Das Auffüllen des Spielfeldes habe ich auf eine meiner Meinung nach naheliegende und doch kreative Art gelöst. Der Ablauf ist ziemlich simpel und beinhaltet nur wenige Schritte. Das Spielfeld ist bei der Übergabe in die Funktion als zweidimensionale Liste Zeile um Zeile gespeichert. Im ersten Schritt wird das Spielfeld quasi rotiert, so dass das Spielfeld nun Spalte um Spalte in der Liste gespeichert ist.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">columns = [[board[j][i] for j in range(len(board))] for i in range(len(board[0]))]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Danach wird durch jede Spalte iteriert und überprüft, ob sich in ihr Felder mit dem Wert -1 befinden. Ist dies der Fall, wird die Liste mit der Spalte umgekehrt, damit sie die Felder in der Reihenfolge unten -&gt; oben enthält. Für jedes Feld mit dem Wert -1 in der Spalte wird nun eben dieses Feld entfernt und ein neues Feld mit einem zufälligen Wert 2, 4, oder 8 hinzugefügt. Die Liste wird am Schluss erneut umgekehrt, damit sie die Felder wieder in der ursprünglichen Anordnung enthält.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">if -1 in column:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    column.reverse()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for i in range(column.count(-1)):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        column.pop(column.index(-1))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        column.append(2 ** random.randint(1, 3))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    column.reverse()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Dieses Vorgehen macht das Prinzip der "Gravitation", welche in dem Spiel implementiert ist, ganz natürlich, da die Felder mit dem Wert -1 aus beliebigen Positionen entfernt werden, die neuen Felder aber immer an der obersten Position angefügt werden.</p><p>Schlussendlich wird das Spielfeld zurück in seine urspüngliche From rotiert und zurückgegeben.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">return [[columns[j][i] for j in range(len(columns))] for i in range(len(columns[0]))]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="herausforderungen-und-tipps">Herausforderungen und Tipps<a class="hash-link" href="#herausforderungen-und-tipps" title="Direkter Link zur Überschrift">​</a></h3><p>Die grösste Herausforderung, die mir beim Entwickeln des Spiels in den Weg kam, war, oft simple aber dafür umso hartnäckigere Fehler zu finden. Syntaxfehler oder fehlender Code sind schnell zu beheben, bei tief sitzenden Logikfehlern oder unüberlegtem gebrauchen von Funktionen, wie bei mir die list.index() Funktion, sind oftmals schwierig zu finden, da man ihnen zu wenig Beachtung schenkt oder sich nicht gut genug mit ihnen beschäftigt. Es lohnt sich also, auch kleine Details in seinem Code zu überdenken und zu hinterfragen, ob man wirklich versteht was er macht. Um Logikfehler schnell zu finden und sogar vorzubeugen ist es ratsam, einen sehr genauen Plan zu haben, was man überhaupt programmieren will. Wildes Drauflosschreiben führt sehr schnell zu einem sehr grossen Chaos.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weiterarbeit an NumTrip]]></title>
        <id>/2023/01/22/weiterarbeit-an-numtrip</id>
        <link href="https://timonj0.github.io/EF_Informatik/2023/01/22/weiterarbeit-an-numtrip"/>
        <updated>2023-01-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[22.01.2023]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="22012023">22.01.2023<a class="hash-link" href="#22012023" title="Direkter Link zur Überschrift">​</a></h2><p>Heute habe ich noch letzte Details wie Win- und Game-Over-Nachrichten in das Spiel implementiert, wodurch es nun vollumfänglich spielbar ist.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weiterarbeit an NumTrip]]></title>
        <id>/2023/01/21/weiterarbeit-an-numtrip</id>
        <link href="https://timonj0.github.io/EF_Informatik/2023/01/21/weiterarbeit-an-numtrip"/>
        <updated>2023-01-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[21.01.2023]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="21012023">21.01.2023<a class="hash-link" href="#21012023" title="Direkter Link zur Überschrift">​</a></h2><p>Heute habe ich als erstes einen simplem score-counter implementier. Der score wird berechnet, indem die anzahl fusionierter Felder mit dem Wert des daraus entstheneden Feldes multipliziert wird. Das sollte es attraktiv machen, möglichs viele Felder aufs mal zu fusionieren.</p><p>Des weiteren habe ich den score in der PyGame-basierten Version des Spiels noch auf den Fenster anzeigen lassen. Die challenge des Spiels besteht mit den eingestellten Konstanten (Feldgrösse = 4x4 und Spielende beim Erreichen des 1024 Feldes) nun darin, eine möglichst grosse Punktzahl vor dem erreichen des 1024 Feldes zu erreichen, ohne game over zu gehen.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weiterarbeit an NumTrip]]></title>
        <id>/2023/01/20/numtrip-gui</id>
        <link href="https://timonj0.github.io/EF_Informatik/2023/01/20/numtrip-gui"/>
        <updated>2023-01-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[16.01.2023]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="16012023">16.01.2023<a class="hash-link" href="#16012023" title="Direkter Link zur Überschrift">​</a></h2><p>Als erstes habe ich heute viel Zeit damit verbracht, das Feld fehlerfrei auf dem Fenster darzustellen. Nach langer mühsamer Fehlersuche stellte sich schliessliche heraus, dass ich aus flüchtigkeit die list.index() funktion an einer Stelle benutzte, an welcher sie nicht das gewünschte Ergebnis zurück gibt. Das führte dazu, dass nicht nur das Feld lückenhaft dargestellt wurde, sondern vertauschte auch während des Spiels scheinbar zufällige Felder. Nun war der Fehler jedoch behoben und ein fehlerfreies NumTrip game war mit einer grafischen Benutzeroberfläche spielbar.</p><p>Als zweiten Schritt habe ich noch den unterschiedlichen Werten der Felder unterschiedliche Farben zugeweisen, was das Spielerlebnis bunt und lustig macht. Dazu habe ich alle Farbwerte in einer Liste gespeichert. Den index, welche Farbe ein bestimmtes Feld haben soll, wird dann einfach mit dem log2 des Wertes berechnet.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weiterarbeit an NumTrip]]></title>
        <id>/2023/01/16/numtrip-gui</id>
        <link href="https://timonj0.github.io/EF_Informatik/2023/01/16/numtrip-gui"/>
        <updated>2023-01-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[16.01.2023]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="16012023">16.01.2023<a class="hash-link" href="#16012023" title="Direkter Link zur Überschrift">​</a></h2><p>Ich habe mich aus langeweile entschieden, mein nun mehr oder weniger fertiggestelltes NumTrip Spiel mithilfe einer grafischen Benutzeroberfläche auf die nächste Stufe zu bringen. Ich habe also PyGame installiert, die initialisierung implementiert und das Spielfeld in einem simplen Fenster dargestellt. Das Spielfeld wird jedoch massiv fehlerhaft dargestellt, da scheinbar zufällige Felder einfach fehlen.</p><p>Code zur darstellung des Spielfelds:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">for row in board:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for field in row:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            field_x = row.index(field) * 100 + 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            field_y = board.index(row) * 100 + 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            text = FONT.render(str(field), True, (255, 255, 255), FIELD_COLOR)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            textRect = text.get_rect()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            textRect.center = (field_x + 45, field_y + 45)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            pg.draw.rect(surface=screen, color=FIELD_COLOR, rect=pg.Rect(field_x, field_y, 90, 90), border_radius=4)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            screen.blit(text, textRect)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pg.display.flip()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weiterarbeit an NumTrip]]></title>
        <id>/2023/01/13/weiterarbeit-an-numtrip</id>
        <link href="https://timonj0.github.io/EF_Informatik/2023/01/13/weiterarbeit-an-numtrip"/>
        <updated>2023-01-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[12.01.2023]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="12012023">12.01.2023<a class="hash-link" href="#12012023" title="Direkter Link zur Überschrift">​</a></h2><p>In dieser kurzen aber effektiven Arbeitssequenz habe ich den Code mehr oder weniger abgabefertig gemacht. Heisst, ich habe die 3 letzten Bugs, welche noch in dem Spiel waren, gefixt, den code aufgeräumt und leserlicher gemacht.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weiterarbeit an NumTrip]]></title>
        <id>/2022/12/23/weiterarbeit-an-numtrip</id>
        <link href="https://timonj0.github.io/EF_Informatik/2022/12/23/weiterarbeit-an-numtrip"/>
        <updated>2022-12-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[23.12.2022]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="23122022">23.12.2022<a class="hash-link" href="#23122022" title="Direkter Link zur Überschrift">​</a></h2><p>Ich startete heute damit, das Spiel kurz zu testen und implementierte daraufhin die erste fehlende Funktion die mir aufgefallen ist; das Game-Over.
Danach hatte ich ein mentales Breakdown, weil ich einen scheinbar absolut unerklärlichen Fehler nicht finden konnte. Nachdem der extrem kleine aber Folgenschwere Fehler gefunden war, hatte ich bereits das nächste mentale Breakdown, weil auf einmal irgendwelche Zahlen ohne ersichtlichen Grund im Spielfeld vertauscht wurden.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weiterarbeit an NumTrip]]></title>
        <id>/2022/12/09/weiterarbeit-an-numtrip</id>
        <link href="https://timonj0.github.io/EF_Informatik/2022/12/09/weiterarbeit-an-numtrip"/>
        <updated>2022-12-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[09.12.2022]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="09122022">09.12.2022<a class="hash-link" href="#09122022" title="Direkter Link zur Überschrift">​</a></h2><p>In der kurzen Arbeitsphase habe ich nur die Spielregel implementiert, dass keine Felder ohne Nachbarn mit dem selben Wert ausgewählt werden können. Ausserdem habe ich das Spiel nun, da es mehr oder weniger vollständig spielbar ist, ausgiebig getestet.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weiterarbeit an NumTrip]]></title>
        <id>/2022/12/08/weiterarbeit-an-numtrip</id>
        <link href="https://timonj0.github.io/EF_Informatik/2022/12/08/weiterarbeit-an-numtrip"/>
        <updated>2022-12-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[08.12.2022]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="08122022">08.12.2022<a class="hash-link" href="#08122022" title="Direkter Link zur Überschrift">​</a></h2><p>Als erstes habe ich mit neuer Kreativität die kleinen aber fatalen logik-Fehler in mark_neighbours() und fill_board() korrigiert.
Danach habe noch die einfache und viel zu lange aufgeschobene Aufgabe erledigt, das unkonventionelle input-Format y/x zu x/y zu ändern.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weiterarbeit an NumTrip]]></title>
        <id>/2022/12/02/weiterarbeit-an-numtrip</id>
        <link href="https://timonj0.github.io/EF_Informatik/2022/12/02/weiterarbeit-an-numtrip"/>
        <updated>2022-12-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[02.12.2022]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="02122022">02.12.2022<a class="hash-link" href="#02122022" title="Direkter Link zur Überschrift">​</a></h2><p>Die heutige Arbeit bestand gänzlich aus mehrfachem Neuschreiben des Algorithmus zum Zusammenschieben der Felder und extrem anstregneder Fehlersuche. Das Resultat ist nun ein Algroithmus der zwar noch nicht immer das tut was er soll, das Spiel stürtzt jedoch immerhin nicht mehr ab.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[User Input in NumTrip]]></title>
        <id>/2022/11/18/user-input</id>
        <link href="https://timonj0.github.io/EF_Informatik/2022/11/18/user-input"/>
        <updated>2022-11-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Eingabe erhalten und Feld markieren]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="eingabe-erhalten-und-feld-markieren">Eingabe erhalten und Feld markieren<a class="hash-link" href="#eingabe-erhalten-und-feld-markieren" title="Direkter Link zur Überschrift">​</a></h2><p>In einem ersten Schritt gibt der Spieler das Feld an, dieses Feld wird lokalisiert und mit '-1' markiert.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="gameloop-implementation">Gameloop Implementation<a class="hash-link" href="#gameloop-implementation" title="Direkter Link zur Überschrift">​</a></h2><p>In einem zweiten Schritt habe ich eine Gameloop-Funktion implementiert, welche in einem loop die "print_board" und "user_input" Funktionen aufruft.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Wiedereinstieg in Python]]></title>
        <id>/2022/08/26/wiedereinstieg-in-python</id>
        <link href="https://timonj0.github.io/EF_Informatik/2022/08/26/wiedereinstieg-in-python"/>
        <updated>2022-08-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Der Wiedereinstieg ist mir eher leich gefallen. Seltsamerweise hatte ich bei fast jeder Aufgabe ein Déja-vu Erlebnis, durch welches mir das Lösen erleichtert wurde. Fehler habe ich natürlich dennoch gemacht, ich habe schliesslich eine ganze Weile kein Python mehr benutzt weshalb die sprachspeifischen Syntaxkentnisse etwas eingerostet waren. Dank der selbsterklärenden Natur der Aufgaben stellte dies aber kein allzu grosses Problem dar.]]></summary>
        <content type="html"><![CDATA[<p>Der Wiedereinstieg ist mir eher leich gefallen. Seltsamerweise hatte ich bei fast jeder Aufgabe ein Déja-vu Erlebnis, durch welches mir das Lösen erleichtert wurde. Fehler habe ich natürlich dennoch gemacht, ich habe schliesslich eine ganze Weile kein Python mehr benutzt weshalb die sprachspeifischen Syntaxkentnisse etwas eingerostet waren. Dank der selbsterklärenden Natur der Aufgaben stellte dies aber kein allzu grosses Problem dar.</p>]]></content>
    </entry>
</feed>